# Source: https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60

# This is a basic workflow to help you get started with Actions
# workflow - —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
# –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ë–∏–ª–¥–∏—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö üì¶ üêç
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
    branches:
      - main
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –º–∞—à–∏–Ω
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "Ubuntu_GCC_9",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc9.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      #- name: cache build
      #  uses: actions/cache@v3
      #  id: cache-config
      #  env:
      #    cache-name: cache-config
      #  with:
      #    path: |
      #      "${{github.workspace}}/build"     
      #    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Makefile') }}
      #    restore-keys: |
      #      ${{ runner.os }}-build-${{ env.cache-name }}-
      #      ${{ runner.os }}-build-
      #      ${{ runner.os }}-

      - name: Install dependencies on windows
        if: startsWith(matrix.config.name, 'windows')
        uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.
          
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        uses: lukka/get-cmake@latest
      
      - name: Install dependencies on ubuntu9
        if: startsWith(matrix.config.name, 'Ubuntu_GCC_9')
        uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.
      
      - name: Install dependencies on macos
        if: startsWith(matrix.config.name, 'macos')
        uses: lukka/get-cmake@latest
          
      - name: Configure
        shell: bash
        if: ${{ steps.cache-config.outputs.cache-hit != 'true' }}
        run: |
          mkdir build
          mkdir instdir
          cmake  \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=../instdir
      
      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }}

      - name: Test std_cxx20
        shell: bash
        run: |
          ./build/test/container/container_container_test_cxx20

      - name: Test std_cxx17
        shell: bash
        run: |
          ./build/test/container/container_container_test_cxx17

      - name: Test std_cxx11
        shell: bash
        run: |
          ./build/test/container/container_container_test_cxx11

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
# Source: https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60

name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
    branches:
      - main
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "Ubuntu_GCC_9",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc9.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies on windows
        if: startsWith(matrix.config.name, 'windows')
        uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.
          
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        uses: lukka/get-cmake@latest
      
      - name: Install dependencies on ubuntu9
        if: startsWith(matrix.config.name, 'Ubuntu_GCC_9')
        uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.
      
      - name: Install dependencies on macos
        if: startsWith(matrix.config.name, 'macos')
        uses: lukka/get-cmake@latest
          
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.1
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.build_type }}
      
      # - name: create install directory
      #   shell: bash
      #   runs:
      #     mkdir instdir
      
      - name: build with cmake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache'
          buildWithCMake: true
          buildDirectory: '${{ github.workspace }}/build'
          
      - name: Test std_cxx20
        shell: bash
        if: startsWith(matrix.config.name, 'windows') == false
        run: |
          ./build/test/container/container_container_test_cxx20
        
      - name: Test std_cxx17
        shell: bash
        if: startsWith(matrix.config.name, 'windows') == false
        run: |
          ./build/test/container/container_container_test_cxx17

      - name: Test std_cxx11
        shell: bash
        if: startsWith(matrix.config.name, 'windows') == false
        run: |
          ./build/test/container/container_container_test_cxx11
      
      - if: startsWith(matrix.config.name, 'windows') && startsWith(matrix.config.cxx, 'cl') 
        name: Test on Windows
        shell: bash
        run: |
          ./build/test/container/Release/container_container_test_cxx11.exe
          ./build/test/container/Release/container_container_test_cxx17.exe
          ./build/test/container/Release/container_container_test_cxx20.exe

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip

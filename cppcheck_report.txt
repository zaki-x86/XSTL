libs/googletest/googlemock/src/gmock-spec-builders.cc:541:13: style:inconclusive: The member function 'testing::::MockObjectRegistry::states' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  StateMap& states() { return states_; }
            ^
libs/googletest/googlemock/test/gmock-actions_test.cc:109:1: error: syntax error [syntaxError]
TEST(TypeTraits, Conjunction) {
^
libs/googletest/googlemock/test/gmock-cardinalities_test.cc:62:1: error: syntax error [syntaxError]
TEST(CardinalityTest, IsDefaultConstructable) { Cardinality c; }
^
libs/googletest/googlemock/test/gmock-function-mocker_test.cc:304:1: error: syntax error [syntaxError]
TYPED_TEST(FunctionMockerTest, MocksVoidFunction) {
^
libs/googletest/googlemock/test/gmock-internal-utils_test.cc:76:1: error: syntax error [syntaxError]
TEST(JoinAsKeyValueTupleTest, JoinsOneTuple) {
^
libs/googletest/googlemock/test/gmock-matchers-arithmetic_test.cc:59:1: error: syntax error [syntaxError]
TEST(Eq2Test, CanDescribeSelf) {
^
libs/googletest/googlemock/test/gmock-matchers-comparisons_test.cc:52:1: error: syntax error [syntaxError]
TEST_P(MonotonicMatcherTestP, IsPrintable) {
^
libs/googletest/googlemock/test/gmock-matchers-containers_test.cc:62:1: error: syntax error [syntaxError]
TEST(ContainsTest, WorksWithMoveOnly) {
^
libs/googletest/googlemock/test/gmock-matchers-misc_test.cc:63:1: error: syntax error [syntaxError]
TEST(AddressTest, Const) {
^
libs/googletest/googlemock/test/gmock-more-actions_test.cc:1463:39: error: syntax error [syntaxError]
                HAS_1_TEMPLATE_PARAMS(template <typename Pointee> class,
                                      ^
libs/googletest/googlemock/test/gmock-nice-strict_test.cc:241:1: error: syntax error [syntaxError]
TEST(NiceMockTest, AllowsExpectedCall) {
^
libs/googletest/googlemock/test/gmock-nice-strict_test.cc:145:1: error: syntax error [syntaxError]
TEST(RawMockTest, WarningForUninterestingCall) {
^
libs/googletest/googlemock/test/gmock-pp-string_test.cc:109:3: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
  EXPECT_EXPANSION("0", GMOCK_PP_IS_BEGIN_PARENS(sss() sss));
  ^
libs/googletest/googlemock/test/gmock-pp_test.cc:44:41: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
static_assert(!GMOCK_PP_IS_BEGIN_PARENS(sss() sss), "");
                                        ^
libs/googletest/googlemock/test/gmock-spec-builders_test.cc:76:1: error: syntax error [syntaxError]
TEST(MockMethodTest, CanInstantiateWithIncompleteArgType) {
^
libs/googletest/googlemock/test/gmock_ex_test.cc:55:1: error: syntax error [syntaxError]
TEST(DefaultValueTest, ThrowsRuntimeErrorWhenNoDefaultValue) {
^
libs/googletest/googlemock/test/gmock_leak_test_.cc:58:1: error: syntax error [syntaxError]
TEST(LeakTest, LeakedMockWithExpectCallCausesFailureWhenLeakCheckingIsEnabled) {
^
libs/googletest/googlemock/test/gmock_stress_test.cc:184:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseGMockWithThreads) {
^
libs/googletest/googletest/samples/sample10_unittest.cc:93:1: error: syntax error [syntaxError]
TEST(ListenersTest, DoesNotLeak) {
^
libs/googletest/googletest/samples/sample1_unittest.cc:100:1: error: syntax error [syntaxError]
TEST(FactorialTest, Zero) { EXPECT_EQ(1, Factorial(0)); }
^
libs/googletest/googletest/samples/sample2.cc:49:32: style:inconclusive: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'. [funcArgNamesDifferent]
void MyString::Set(const char* a_c_string) {
                               ^
libs/googletest/googletest/samples/sample2.h:76:24: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
  void Set(const char* c_string);
                       ^
libs/googletest/googletest/samples/sample2.cc:49:32: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
void MyString::Set(const char* a_c_string) {
                               ^
libs/googletest/googletest/samples/sample2_unittest.cc:78:1: error: syntax error [syntaxError]
TEST(MyString, ConstructorFromCString) {
^
libs/googletest/googletest/samples/sample3_unittest.cc:117:1: error: syntax error [syntaxError]
TEST_F(QueueTestSmpl3, DefaultConstructor) {
^
libs/googletest/googletest/samples/sample5_unittest.cc:95:1: error: syntax error [syntaxError]
TEST_F(IntegerFunctionTest, Factorial) {
^
libs/googletest/googletest/samples/sample6_unittest.cc:95:1: error: syntax error [syntaxError]
TYPED_TEST(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
libs/googletest/googletest/samples/sample7_unittest.cc:75:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTestSmpl7, ReturnsFalseForNonPrimes) {
^
libs/googletest/googletest/samples/sample8_unittest.cc:105:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
libs/googletest/googletest/samples/sample9_unittest.cc:83:1: error: syntax error [syntaxError]
TEST(CustomOutputTest, PrintsMessage) {
^
libs/googletest/googletest/src/gtest-death-test.cc:1165:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();
^
libs/googletest/googletest/src/gtest-death-test.cc:1369:30: style: Variable 'child_pid' is reassigned a value before the old one has been used. [redundantAssignment]
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
libs/googletest/googletest/src/gtest-death-test.cc:1361:15: note: child_pid is assigned
    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);
              ^
libs/googletest/googletest/src/gtest-death-test.cc:1369:30: note: child_pid is overwritten
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
libs/googletest/googletest/src/gtest-death-test.cc:1076:48: style:inconclusive: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'. [funcArgNamesDifferent]
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
libs/googletest/googletest/src/gtest-death-test.cc:1062:32: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
  ForkingDeathTest(const char* statement, Matcher<const std::string&> matcher);
                               ^
libs/googletest/googletest/src/gtest-death-test.cc:1076:48: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
libs/googletest/googletest/src/gtest-death-test.cc:192:0: information: Skipping configuration 'GTEST_HAS_DEATH_TEST;GTEST_KILLED_BY_SIGNAL_OVERRIDE_;GTEST_OS_FUCHSIA=0;GTEST_OS_WINDOWS=0' since the value of 'GTEST_KILLED_BY_SIGNAL_OVERRIDE_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {
^
libs/googletest/googletest/src/gtest-death-test.cc:863:7: style:inconclusive: The member function 'testing::internal::Arguments::size' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  int size() { return static_cast<int>(args_.size()) - 1; }
      ^
libs/googletest/googletest/src/gtest-death-test.cc:1208:7: style: struct member 'ExecDeathTestArgs::close_fd' is never used. [unusedStructMember]
  int close_fd;       // File descriptor to close; the read end of a pipe
      ^
libs/googletest/googletest/src/gtest-death-test.cc:222:0: information: Skipping configuration 'GTEST_HAS_DEATH_TEST;WCOREDUMP' since the value of 'WCOREDUMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (WCOREDUMP(exit_code)) {
^
libs/googletest/googletest/src/gtest-filepath.cc:117:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed. [duplicateBreak]
  return FilePath(result == nullptr ? "" : cwd);
  ^
libs/googletest/googletest/src/gtest-port.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
libs/googletest/googletest/src/gtest-port.cc:1328:0: information: Skipping configuration 'GTEST_GET_BOOL_FROM_ENV_' since the value of 'GTEST_GET_BOOL_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
^
libs/googletest/googletest/src/gtest-port.cc:1342:0: information: Skipping configuration 'GTEST_GET_INT32_FROM_ENV_' since the value of 'GTEST_GET_INT32_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
^
libs/googletest/googletest/src/gtest-port.cc:1385:0: information: Skipping configuration 'GTEST_GET_STRING_FROM_ENV_' since the value of 'GTEST_GET_STRING_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
^
libs/googletest/googletest/src/gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
libs/googletest/googletest/src/gtest.cc:3280:7: style: Condition '!use_color' is always true [knownConditionTrueFalse]
  if (!use_color) {
      ^
libs/googletest/googletest/src/gtest.cc:3278:40: note: Assignment 'use_color=in_color_mode&&(color!=GTestColor::kDefault)', assigned value is 0
  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
                                       ^
libs/googletest/googletest/src/gtest.cc:3280:7: note: Condition '!use_color' is always true
  if (!use_color) {
      ^
libs/googletest/googletest/src/gtest.cc:5827:22: style: Condition 'in_subprocess_for_death_test' is always false [knownConditionTrueFalse]
  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
                     ^
libs/googletest/googletest/src/gtest.cc:5787:39: note: Assignment 'in_subprocess_for_death_test=false', assigned value is 0
  bool in_subprocess_for_death_test = false;
                                      ^
libs/googletest/googletest/src/gtest.cc:5809:21: note: Assuming condition is false
  if (GTEST_FLAG_GET(list_tests)) {
                    ^
libs/googletest/googletest/src/gtest.cc:5827:22: note: Condition 'in_subprocess_for_death_test' is always false
  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
                     ^
libs/googletest/googletest/src/gtest.cc:5347:34: error: Null pointer dereference: static_cast<volatile int*>(nullptr) [nullPointer]
      *static_cast<volatile int*>(nullptr) = 1;
                                 ^
libs/googletest/googletest/src/gtest.cc:3838:1: style:inconclusive: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3764:43: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramStart(const UnitTest& unit_test) override;
                                          ^
libs/googletest/googletest/src/gtest.cc:3838:1: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3839:1: style:inconclusive: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3766:49: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
                                                ^
libs/googletest/googletest/src/gtest.cc:3839:1: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3845:1: style:inconclusive: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3773:36: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestStart(const TestInfo& test_info) override;
                                   ^
libs/googletest/googletest/src/gtest.cc:3845:1: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3846:1: style:inconclusive: Function 'OnTestDisabled' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3774:39: note: Function 'OnTestDisabled' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestDisabled(const TestInfo& test_info) override;
                                      ^
libs/googletest/googletest/src/gtest.cc:3846:1: note: Function 'OnTestDisabled' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3847:1: style:inconclusive: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
libs/googletest/googletest/src/gtest.cc:3775:47: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
  void OnTestPartResult(const TestPartResult& result) override;
                                              ^
libs/googletest/googletest/src/gtest.cc:3847:1: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
libs/googletest/googletest/src/gtest.cc:3848:1: style:inconclusive: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3782:52: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
                                                   ^
libs/googletest/googletest/src/gtest.cc:3848:1: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3849:1: style:inconclusive: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3767:47: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
                                              ^
libs/googletest/googletest/src/gtest.cc:3849:1: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3850:1: style:inconclusive: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3783:50: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
                                                 ^
libs/googletest/googletest/src/gtest.cc:3850:1: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3851:1: style:inconclusive: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3776:34: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestEnd(const TestInfo& test_info) override;
                                 ^
libs/googletest/googletest/src/gtest.cc:3851:1: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
libs/googletest/googletest/src/gtest.cc:3857:1: style:inconclusive: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:3785:41: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramEnd(const UnitTest& unit_test) override;
                                        ^
libs/googletest/googletest/src/gtest.cc:3857:1: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
libs/googletest/googletest/src/gtest.cc:6605:15: style: Unused variable: flagfile_value [unusedVariable]
  std::string flagfile_value;
              ^
libs/googletest/googletest/src/gtest.cc:619:0: information: Skipping configuration 'GTEST_CUSTOM_GET_ARGVS_' since the value of 'GTEST_CUSTOM_GET_ARGVS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
^
libs/googletest/googletest/src/gtest.cc:6736:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
libs/googletest/googletest/src/gtest.cc:6746:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
libs/googletest/googletest/src/gtest.cc:6762:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
^
libs/googletest/googletest/src/gtest.cc:6813:0: information: Skipping configuration 'GTEST_CUSTOM_SRCDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_SRCDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
^
libs/googletest/googletest/src/gtest.cc:6813:0: information: Skipping configuration 'GTEST_CUSTOM_SRCDIR_FUNCTION_;GTEST_CUSTOM_TEMPDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_SRCDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
^
libs/googletest/googletest/src/gtest.cc:6792:0: information: Skipping configuration 'GTEST_CUSTOM_SRCDIR_FUNCTION_;GTEST_CUSTOM_TEMPDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
^
libs/googletest/googletest/src/gtest.cc:6792:0: information: Skipping configuration 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
^
libs/googletest/googletest/src/gtest.cc:5648:0: information: Skipping configuration 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' since the value of 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
^
libs/googletest/googletest/src/gtest.cc:5794:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
^
libs/googletest/googletest/test/googletest-death-test-test.cc:1425:29: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_DEATH_IF_SUPPORTED(;, "");
                            ^
libs/googletest/googletest/test/googletest-death-test-test.cc:744:65: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  ASSERT_DEBUG_DEATH(GTEST_LOG_(INFO) << "In ASSERT_DEBUG_DEATH"; return, "")
                                                                ^
libs/googletest/googletest/test/googletest-death-test-test.cc:1340:53: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NONFATAL_FAILURE(EXPECT_DEATH_IF_SUPPORTED(;, ""), "");
                                                    ^
libs/googletest/googletest/test/googletest-failfast-unittest_.cc:47:1: error: syntax error [syntaxError]
TEST_F(HasFixtureTest, Test0) {}
^
libs/googletest/googletest/test/googletest-filepath-test.cc:99:1: error: syntax error [syntaxError]
TEST(IsEmptyTest, ReturnsTrueForEmptyPath) {
^
libs/googletest/googletest/test/googletest-filter-unittest_.cc:47:1: error: syntax error [syntaxError]
TEST_F(FooTest, Abc) {}
^
libs/googletest/googletest/test/googletest-global-environment-unittest_.cc:50:1: error: syntax error [syntaxError]
TEST(SomeTest, DoesFoo) { FAIL() << "Unexpected call"; }
^
libs/googletest/googletest/test/googletest-listener-test.cc:224:1: error: syntax error [syntaxError]
TEST_F(ListenerTest, DoesFoo) {
^
libs/googletest/googletest/test/googletest-message-test.cc:52:1: error: syntax error [syntaxError]
TEST(MessageTest, CopyConstructor) {
^
libs/googletest/googletest/test/googletest-options-test.cc:65:1: error: syntax error [syntaxError]
TEST(XmlOutputTest, GetOutputFormatDefault) {
^
libs/googletest/googletest/test/googletest-output-test_.cc:98:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, EmptyBasenameParamInst, testing::Values(1));
                         ^
libs/googletest/googletest/test/googletest-param-test-invalid-name1-test_.cc:35:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {}
^
libs/googletest/googletest/test/googletest-param-test-invalid-name2-test_.cc:40:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {}
^
libs/googletest/googletest/test/googletest-param-test-test.cc:1141:1: error: syntax error [syntaxError]
TEST_P(NotInstantiatedTest, Used) {}
^
libs/googletest/googletest/test/googletest-port-test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
libs/googletest/googletest/test/googletest-port-test.cc:70:1: error: syntax error [syntaxError]
TEST(IsXDigitTest, ReturnsFalseForNarrowNonAscii) {
^
libs/googletest/googletest/test/googletest-port-test.cc:396:0: information: Skipping configuration 'GTEST_USES_SIMPLE_RE' since the value of 'GTEST_USES_SIMPLE_RE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EXPECT_TRUE(GTEST_USES_SIMPLE_RE);
^
libs/googletest/googletest/test/googletest-printers-test.cc:299:1: error: syntax error [syntaxError]
TEST(PrintEnumTest, AnonymousEnum) {
^
libs/googletest/googletest/test/googletest-shuffle-test_.cc:48:1: error: syntax error [syntaxError]
TEST_F(A, A) {}
^
libs/googletest/googletest/test/googletest-test-part-test.cc:54:1: error: syntax error [syntaxError]
TEST_F(TestPartResultTest, ConstructorWorks) {
^
libs/googletest/googletest/test/gtest-typed-test_test.cc:159:1: error: syntax error [syntaxError]
TYPED_TEST(NumericTest, DefaultIsZero) { EXPECT_EQ(0, TypeParam()); }
^
libs/googletest/googletest/test/gtest-unittest-api_test.cc:100:1: error: syntax error [syntaxError]
TYPED_TEST(TestSuiteWithCommentTest, Dummy) {}
^
libs/googletest/googletest/test/gtest_dirs_test.cc:69:1: error: syntax error [syntaxError]
TEST(TempDirTest, InEnvironment) {
^
libs/googletest/googletest/test/gtest_environment_test.cc:100:1: error: syntax error [syntaxError]
TEST(FooTest, Bar) { test_was_run = true; }
^
libs/googletest/googletest/test/gtest_pred_impl_unittest.cc:87:8: style:inconclusive: The member function 'PredFunctor1::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1) {
       ^
libs/googletest/googletest/test/gtest_pred_impl_unittest.cc:463:8: style:inconclusive: The member function 'PredFunctor2::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1, const T2& v2) {
       ^
libs/googletest/googletest/test/gtest_pred_impl_unittest.cc:846:8: style:inconclusive: The member function 'PredFunctor3::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1, const T2& v2, const T3& v3) {
       ^
libs/googletest/googletest/test/gtest_pred_impl_unittest.cc:1248:8: style:inconclusive: The member function 'PredFunctor4::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1, const T2& v2, const T3& v3, const T4& v4) {
       ^
libs/googletest/googletest/test/gtest_pred_impl_unittest.cc:1664:8: style:inconclusive: The member function 'PredFunctor5::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1, const T2& v2, const T3& v3, const T4& v4,
       ^
libs/googletest/googletest/test/gtest_premature_exit_test.cc:79:1: error: syntax error [syntaxError]
TEST_F(PrematureExitDeathTest, FileExistsDuringExecutionOfDeathTest) {
^
libs/googletest/googletest/test/gtest_repeat_test.cc:73:1: error: syntax error [syntaxError]
TEST(FooTest, ShouldFail) {
^
libs/googletest/googletest/test/gtest_sole_header_test.cc:41:27: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NO_FATAL_FAILURE(;);
                          ^
libs/googletest/googletest/test/gtest_stress_test.cc:116:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseScopedTraceAndAssertionsInManyThreads) {
^
libs/googletest/googletest/test/gtest_unittest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
libs/googletest/googletest/test/gtest_unittest.cc:5298:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, CodeLocationForTESTP, Values(0));
                         ^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:79:1: error: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest' [ctuOneDefinitionRuleViolation]
class ValueParamTest : public testing::TestWithParam<MyType> {};
^
libs/googletest/googletest/test/gtest_list_output_unittest_.cc:51:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public ::testing::TestWithParam<int> {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:79:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public testing::TestWithParam<MyType> {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:105:1: error: The one definition rule is violated, different classes/structs have the same name 'TypedTest' [ctuOneDefinitionRuleViolation]
class TypedTest : public testing::Test {};
^
libs/googletest/googletest/test/gtest_list_output_unittest_.cc:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public ::testing::Test {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:105:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public testing::Test {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:79:1: error: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest' [ctuOneDefinitionRuleViolation]
class ValueParamTest : public testing::TestWithParam<MyType> {};
^
libs/googletest/googletest/test/gtest_xml_output_unittest_.cc:161:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public TestWithParam<int> {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:79:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public testing::TestWithParam<MyType> {};
^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:105:1: error: The one definition rule is violated, different classes/structs have the same name 'TypedTest' [ctuOneDefinitionRuleViolation]
class TypedTest : public testing::Test {};
^
libs/googletest/googletest/test/gtest_xml_output_unittest_.cc:168:23: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
template <typename T> class TypedTest : public Test {};
                      ^
libs/googletest/googletest/test/googletest-list-tests-unittest_.cc:105:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public testing::Test {};
^
libs/googletest/googletest/src/gtest-death-test.cc:1105:0: style: The function 'AssumeRole' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-cardinalities.cc:142:0: style: The function 'AtMost' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-internal-utils.cc:222:0: style: The function 'Base64Unescape' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-port.cc:1181:0: style: The function 'CaptureStdout' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-port.cc:1251:0: style: The function 'ClearInjectableArgvs' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1723:0: style: The function 'CmpHelperSTRCASEEQ' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1748:0: style: The function 'CmpHelperSTRCASENE' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1711:0: style: The function 'CmpHelperSTREQ' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1735:0: style: The function 'CmpHelperSTRNE' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1703:0: style: The function 'DoubleLE' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1620:0: style: The function 'DoubleNearPredFormat' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-death-test.cc:233:0: style: The function 'ExitedUnsuccessfully' is never used. [unusedFunction]

^
libs/googletest/googletest/samples/sample1.cc:35:0: style: The function 'Factorial' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1696:0: style: The function 'FloatLE' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-port.cc:997:0: style: The function 'FormatCompilerIndependentFileLocation' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-matchers.cc:52:0: style: The function 'FormatMatcherDescription' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1607:0: style: The function 'GetBoolAssertionFailureMessage' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-port.cc:1191:0: style: The function 'GetCapturedStdout' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-internal-utils.cc:115:0: style: The function 'GetFailureReporter' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:2328:0: style: The function 'GetReservedOutputAttributesForElement' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-internal-utils.cc:189:0: style: The function 'GetWithoutMatchers' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-internal-utils.cc:191:0: style: The function 'IllegalDoDefault' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-death-test.cc:149:0: style: The function 'InDeathTestChild' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:504:0: style: The function 'InsertSyntheticTestCase' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1827:0: style: The function 'IsNotSubstring' is never used. [unusedFunction]

^
libs/googletest/googletest/samples/sample1.cc:45:0: style: The function 'IsPrime' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-cardinalities.cc:75:0: style: The function 'IsSatisfiedByCallCount' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-cardinalities.cc:79:0: style: The function 'IsSaturatedByCallCount' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:1817:0: style: The function 'IsSubstring' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-spec-builders.cc:75:0: style: The function 'LogWithLocation' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:2772:0: style: The function 'MakeAndRegisterTestInfo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-death-test.cc:1566:0: style: The function 'ParseInternalRunDeathTestFlag' is never used. [unusedFunction]

^
libs/googletest/googletest/samples/sample4.cc:50:0: style: The function 'Print' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:128:0: style: The function 'PrintBytesInObjectTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:523:0: style: The function 'PrintStringTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:537:0: style: The function 'PrintU16StringTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:541:0: style: The function 'PrintU32StringTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:532:0: style: The function 'PrintU8StringTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:546:0: style: The function 'PrintWideStringTo' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:554:0: style: The function 'RegisterTypeParameterizedTestSuiteInstantiation' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-internal-utils.cc:102:0: style: The function 'ReportFailure' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:2469:0: style: The function 'ReportFailureInUnknownLocation' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:2784:0: style: The function 'ReportInvalidTestSuiteType' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock-spec-builders.cc:286:0: style: The function 'ReportUninterestingCall' is never used. [unusedFunction]

^
libs/googletest/googletest/test/googletest-catch-exceptions-test_.cc:147:0: style: The function 'SetUpTestSuite' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:6811:0: style: The function 'SrcDir' is never used. [unusedFunction]

^
libs/googletest/googletest/test/googletest-catch-exceptions-test_.cc:111:0: style: The function 'TearDownTestSuite' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest.cc:6790:0: style: The function 'TempDir' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-printers.cc:392:0: style: The function 'UniversalPrintArray' is never used. [unusedFunction]

^
libs/googletest/googletest/src/gtest-death-test.cc:1083:0: style: The function 'Wait' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock_main.cc:61:0: style: The function '_tmain' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock_main.cc:45:0: style: The function 'loop' is never used. [unusedFunction]

^
libs/googletest/googlemock/src/gmock_main.cc:39:0: style: The function 'setup' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config. [missingInclude]

